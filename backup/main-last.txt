package main

import (
	"bytes"
	"fmt"
	"io"
	"mime/multipart"
	"net/http"
	"os"
	"time"

	"github.com/gin-gonic/gin"
)

const (
	GOTENBERG_API = "http://100.94.156.4:4000/forms/chromium/convert/html"
)

func main() {
	router := gin.Default()

	router.POST("/savehtml", func(c *gin.Context) {
		// Retrieve HTML string from request body
		htmlString := c.PostForm("html")

		// Check if HTML string is empty
		if htmlString == "" {
			c.JSON(http.StatusBadRequest, gin.H{"error": "HTML string is empty"})
			return
		}

		// Save HTML string to index.html file in timestamped directory
		err := saveHTMLToFile(htmlString)
		if err != nil {
			c.JSON(http.StatusInternalServerError, gin.H{"error": "Failed to save HTML string"})
			return
		}

		c.JSON(http.StatusOK, gin.H{"message": "HTML string saved to index.html"})
	})

	// Run the server
	router.Run(":5000")
}

func saveHTMLToFile(htmlString string) error {
	// Generate timestamped directory name
	timestamp := time.Now().Format("20060102_150405") // Format: YYYYMMDD_HHMMSS
	dirName := "./" + timestamp

	// Create timestamped directory
	err := os.Mkdir(dirName, 0755)
	if err != nil {
		return err
	}

	// Create index.html file in timestamped directory
	filePath := fmt.Sprintf("%s/index.html", dirName)
	file, err := os.Create(filePath)
	if err != nil {
		return err
	}
	defer file.Close()

	// Write HTML string to file
	_, err = file.WriteString(htmlString)
	if err != nil {
		return err
	}

	fmt.Printf("HTML string saved to %s\n", filePath)

	generatePDF(filePath)

	return nil
}

func generatePDF(filePath string) {
	// URL endpoint
	url := GOTENBERG_API

	// Open file
	file, err := os.Open(filePath)
	if err != nil {
		fmt.Println("Error opening file:", err)
		return
	}
	defer file.Close()

	// Create HTTP multipart request
	body := &bytes.Buffer{}
	writer := multipart.NewWriter(body)
	part, err := writer.CreateFormFile("files", filePath)
	if err != nil {
		fmt.Println("Error creating form file:", err)
		return
	}
	_, err = io.Copy(part, file)
	if err != nil {
		fmt.Println("Error copying file to form:", err)
		return
	}
	writer.Close()

	// Send POST request
	request, err := http.NewRequest("POST", url, body)
	if err != nil {
		fmt.Println("Error creating POST request:", err)
		return
	}
	request.Header.Set("Content-Type", writer.FormDataContentType())

	client := &http.Client{}
	response, err := client.Do(request)
	if err != nil {
		fmt.Println("Error sending request:", err)
		return
	}
	defer response.Body.Close()

	// Save response to file
	outputFile, err := os.Create("index.pdf")
	if err != nil {
		fmt.Println("Error creating output file:", err)
		return
	}
	defer outputFile.Close()

	_, err = io.Copy(outputFile, response.Body)
	if err != nil {
		fmt.Println("Error saving response to file:", err)
		return
	}

	fmt.Println("File saved as index.pdf")
}

